# -*- coding: utf-8 -*-
"""denoising.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AoWAgsJe_rhi-2J5ATo_uKVUdJam9kpl
"""

from google.colab import files
files.upload()  # Upload kaggle.json

import kagglehub

# Download latest version
path = kagglehub.dataset_download("sayuksh/denoising-audio-collection")

print("Path to dataset files:", path)

print("Path to dataset files:", path)

data_path = "/root/.cache/kagglehub/datasets/sayuksh/denoising-audio-collection/versions/1"
clean_dir = os.path.join(data_path, "Clean Audio")
noisy_dir = os.path.join(data_path, "Noisy Audio")

!pip install librosa soundfile

import os
import librosa
import numpy as np
import soundfile as sf
from IPython.display import Audio

sample_rate = 16000
duration = 2  # seconds
fixed_length = sample_rate * duration

def load_audio(filepath, sr=16000):
    y, _ = librosa.load(filepath, sr=sr)
    if len(y) > fixed_length:
        y = y[:fixed_length]
    else:
        y = np.pad(y, (0, fixed_length - len(y)))
    return y

clean_files = sorted(os.listdir(clean_dir))
noisy_files = sorted(os.listdir(noisy_dir))

X_noisy = []
Y_clean = []

for cfile, nfile in zip(clean_files, noisy_files):
    clean = load_audio(os.path.join(clean_dir, cfile))
    noisy = load_audio(os.path.join(noisy_dir, nfile))
    Y_clean.append(clean)
    X_noisy.append(noisy)

X_noisy = np.array(X_noisy)[..., np.newaxis]  # shape: (samples, time, 1)
Y_clean = np.array(Y_clean)[..., np.newaxis]  # shape: (samples, time, 1)

print("Noisy shape:", X_noisy.shape)
print("Clean shape:", Y_clean.shape)

import os

data_path = "/root/.cache/kagglehub/datasets/sayuksh/denoising-audio-collection/versions/1"
print(os.listdir(data_path))

clean_dir = os.path.join(data_path, "clean_trainset_28spk_wav")
noisy_dir = os.path.join(data_path, "noisy_trainset_28spk_wav")

clean_test_dir = os.path.join(data_path, "clean_testset_wav")
noisy_test_dir = os.path.join(data_path, "noisy_testset_wav")

import shutil

shutil.copytree(
    "/root/.cache/kagglehub/datasets/sayuksh/denoising-audio-collection/versions/1",
    "/content/denoising_audio"
)

import os

data_path = "/content/denoising_audio"
clean_dir = os.path.join(data_path, "clean_trainset_28spk_wav")
noisy_dir = os.path.join(data_path, "noisy_trainset_28spk_wav")

import librosa
import numpy as np

def load_audio(file_path, sr=16000, duration=2.0):
    audio, _ = librosa.load(file_path, sr=sr, duration=duration)
    audio = librosa.util.fix_length(audio, size=int(sr * duration))
    return audio

clean_files = sorted(os.listdir(clean_dir))
noisy_files = sorted(os.listdir(noisy_dir))

X_noisy = []
Y_clean = []

for cfile, nfile in zip(clean_files, noisy_files):
    clean = load_audio(os.path.join(clean_dir, cfile))
    noisy = load_audio(os.path.join(noisy_dir, nfile))
    Y_clean.append(clean)
    X_noisy.append(noisy)

X_noisy = np.array(X_noisy)[..., np.newaxis]
Y_clean = np.array(Y_clean)[..., np.newaxis]

print("Noisy shape:", X_noisy.shape)
print("Clean shape:", Y_clean.shape)

clean_files = sorted([f for f in os.listdir(clean_dir) if f.endswith('.wav')])
noisy_files = sorted([f for f in os.listdir(noisy_dir) if f.endswith('.wav')])

X_noisy = []
Y_clean = []

for cfile, nfile in zip(clean_files, noisy_files):
    clean_path = os.path.join(clean_dir, cfile)
    noisy_path = os.path.join(noisy_dir, nfile)

    clean = load_audio(clean_path)
    noisy = load_audio(noisy_path)

    Y_clean.append(clean)
    X_noisy.append(noisy)

X_noisy = np.array(X_noisy)[..., np.newaxis]
Y_clean = np.array(Y_clean)[..., np.newaxis]

print("Noisy shape:", X_noisy.shape)
print("Clean shape:", Y_clean.shape)

import glob

clean_dir = "/content/denoising_audio/clean_trainset_28spk_wav"
noisy_dir = "/content/denoising_audio/noisy_trainset_28spk_wav"

clean_files = sorted(glob.glob(os.path.join(clean_dir, "**", "*.wav"), recursive=True))
noisy_files = sorted(glob.glob(os.path.join(noisy_dir, "**", "*.wav"), recursive=True))

print("Found clean files:", len(clean_files))
print("Found noisy files:", len(noisy_files))

import librosa
import numpy as np

def load_audio(file_path, sr=16000, duration=1.0):
    samples = int(sr * duration)
    audio, _ = librosa.load(file_path, sr=sr, duration=duration)
    if len(audio) < samples:
        audio = np.pad(audio, (0, samples - len(audio)))  # pad if shorter
    else:
        audio = audio[:samples]
    return audio

X_noisy = []
Y_clean = []

for cfile, nfile in zip(clean_files[:100], noisy_files[:100]):  # limit to 100 samples to start
    clean = load_audio(cfile)
    noisy = load_audio(nfile)
    Y_clean.append(clean)
    X_noisy.append(noisy)

X_noisy = np.array(X_noisy)[..., np.newaxis]
Y_clean = np.array(Y_clean)[..., np.newaxis]

print("Noisy shape:", X_noisy.shape)
print("Clean shape:", Y_clean.shape)

import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv1D, MaxPooling1D, UpSampling1D

input_shape = X_noisy.shape[1:]  # (16000, 1)

input_layer = Input(shape=input_shape)

# Encoder
x = Conv1D(16, 3, activation='relu', padding='same')(input_layer)
x = MaxPooling1D(2, padding='same')(x)
x = Conv1D(8, 3, activation='relu', padding='same')(x)
encoded = MaxPooling1D(2, padding='same')(x)

# Decoder
x = Conv1D(8, 3, activation='relu', padding='same')(encoded)
x = UpSampling1D(2)(x)
x = Conv1D(16, 3, activation='relu', padding='same')(x)
x = UpSampling1D(2)(x)
decoded = Conv1D(1, 3, activation='sigmoid', padding='same')(x)

# Model
model = Model(input_layer, decoded)
model.compile(optimizer='adam', loss='mse')

model.summary()

model.fit(X_noisy, Y_clean, epochs=50, batch_size=8, validation_split=0.1)

import IPython.display as ipd

# Pick a test sample
test_index = 0
noisy_input = X_noisy[test_index][np.newaxis, ...]  # add batch dimension

# Predict denoised output
denoised_output = model.predict(noisy_input)

# Listen to original noisy and denoised
print("Noisy Audio:")
ipd.display(ipd.Audio(X_noisy[test_index].squeeze(), rate=16000))

print("Denoised Audio:")
ipd.display(ipd.Audio(denoised_output.squeeze(), rate=16000))

print("Clean Audio (Ground Truth):")
ipd.display(ipd.Audio(Y_clean[test_index].squeeze(), rate=16000))

model.save("denoising_model.keras")

model = tf.keras.models.load_model("denoising_model.keras")

model.save("denoising_model.keras")

model = tf.keras.models.load_model("denoising_model.keras")

model = tf.keras.models.load_model("denoising_model.keras", compile=False)

from google.colab import files
files.download("denoising_model.keras")

from google.colab import files
files.download("denoising_model.h5")